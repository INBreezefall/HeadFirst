实质
    通过更改 实例内部 成员变量/当前状态变量 指向的状态实例地址
    造成 实例的同一函数调用 在 不同内部状态变量下的 行为不同
        使用 组合 通过 引用不同的状态对象 造成 类同一函数调用结果改变的假象

    状态间的流转逻辑 位于 各个状态实现的 行为函数中
    当然也可以位于 Context 行为函数内部，但就会造成 代码耦合

    状态变量共享
        1.静态实例
        2.如果状态实现类中 使用 Context 方法，则必须在 每个 handle 行为方法增加一个 Context 传入参数

    State 应该是 Interface or Abstract Class ?
        如果有 可复用方法 & 可继承成员变量 则可以提升为 Abstract Class
        否则 Interface default method 也能满足常见需求

    重复方法 可以抽到 Interface default 方法中，亦或者用 抽象类代替 接口，当然并不建议
