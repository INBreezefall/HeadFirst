工具箱总结
    原则
        对扩展开放，对修改关闭
    模式
        装饰者模式: 非编译期将属性函数通过构造器参数包装附加到目标对象上
        至此扩展功能，装饰者模式提供了比继承更弹性的替代方案
            将 一个主体类的 某一项功能/客体(功能属性+功能方法) 与 主体类进行分离 从而 不会污染 类继承
            污染：子类 继承到 不需要/无用的 属性及方法
            甚至于 一个主体类的 多项功能(属性+方法) 是相互冲突的，特定子类只要其中一个功能，并不要全部且冲突的功能

            衣服的多个兜，主体类 穿着 衣服，衣服 包含多个 功能。有别于 单线继承(会导致类爆炸[属性函数])
            装饰者 采用 共祖多线 继承，主体线 不需要包含 祖类实例变量，副体线 需要 包含 祖类实例变量
            从而实现 对(副体线)扩展开放，对(主体线)修改关闭

    注:
        组合(类内实例变量)和委托(super./类内实例变量.)可用于 动态(在运行时) 加上 新的行为(委托前后2种时机)
        装饰者模式 不仅可 加上 新的行为，甚至于 可以 替换 被装饰者的行为 达到特定目的
        装饰者模式 会导致设计中出现很多 小对象，如果过度使用 会让程序 变得复杂
        装饰者以便对组件的客户是透明的，除非客户程序依赖于 主体类/组件的具体类型

    将变化与不变抽离出来 在 装饰者模式中 体现
        1.主体/组件类 一般来说是 根基，一般不变，变的只是 其 所拥有的能力(函数及属性)
        2.多个能力间可能存在 不应同时存在的矛盾，并且 都写在 主体类中 甚是 大量，难看难理解(无层次)