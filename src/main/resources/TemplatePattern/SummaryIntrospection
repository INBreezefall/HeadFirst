模板方法模式
    实质: 抽象类 + 抽象函数
    定义: 在抽象父类的一个方法中 定义 一个算法的骨架，某些步骤(抽象)函数延迟到子类中实现。
    意义: 模板方法使得 子类可以在不改变算法结构的情况下，重新定义算法中的某些步骤。

    原则: 好莱坞原则
        别调用我们(抽象类方法)，我们会调用你(具体实现子类方法)
        换句话说，高层组件 与 高层组件 直接交互，高层组件 对待 底层实现组件 的方式是 "别调用我们，我们会调用你"
        实质: 将 控制权 放置在高层抽象中，决定何时调用底层实现
        好处: 防止 依赖腐败，避免 高层抽象组件 直接依赖 底层实现组件，以及 底层实现组件 直接依赖 高层抽象组件，
            以及 高层抽象组件 依赖 边侧组件 且 边侧组件 依赖 底层实现组件 这种 间接依赖/依赖传递
            以及 解耦 同组(一个抽象类继承体系)底层与高层之间的依赖问题，通过挂钩 令 高层抽象组件 无需依赖 底层实现组件
            以及 避免 高层和底层组件之间具有明显的环状依赖
        与 依赖倒置原则:
            依赖倒置原则 要求 避免使用 具体类，而是多用抽象
            好莱坞原则 则是一种技巧，不要让 高层抽象依赖底层实现
            二者目标都是 解耦，令依赖关系清晰且尽可能的少

    注意:
        1.final 修饰符 用于禁止子类进行覆写
        2.如果 某些步骤是可选的 Optional 则可以用 condition() & hook() 进行控制，当然 hook() 默认实现是 空
        3.hook() 意义可以参考 Spring AOP 切入点概念，按需实现。
        4.抽象方法 越少越好，毕竟 它们 都需要在子类进行独立实现。

    与策略模式:
        策略模式是 一整套算法家族，对于家族内的成员 都是一个完整的算法 且 可以相互替换
        模板方法 强调的是 一个完整算法的 部分步骤 被 子类实现替换，对于完整算法的骨架是具有强制控制权的
            代码复用的效率是最高的