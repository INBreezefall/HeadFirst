工具箱总结
    原则
        为交互对象之间的松耦合(接口+组合)设计而努力
    模式
        观察者模式: 定义对象间 一对多 依赖，当主/主题对象发生改变时，它的所有依赖者/观察者均会收到通知并更新
        优点: 让 主题 与 观察者 松耦合 (可以交互但不需要清楚彼此细节，改变二者之一都不影响另一方)
            松耦合——在代码/硬编码中，将对象之间的相互依赖降到最低 [双方类中 必含 对方的实例变量]
            接口——一种公有契约，只要仍遵守接口规则，那么两者其他逻辑都可任意更改/内部细节相互不可知
                契约指代——Subject调用Observer的update() 及 Observer调用Subject的register/remove()

    注:
        1.存在多个依赖者时，不能依赖特定的通知次序 [要看具体实现]
        2.观察者模式存在 推、拉 两种数据传输方式，推即是 update(Object data) 拉即是 Subject.getter()
        3.Java.util.Observable 是 抽象类，接口实现 放在了 ObserverMode.custom，区别是，接口不能加锁

    将变化与不变抽离出来 在 观察者模式中 体现
        1.Observers 类型、数量 是变化的
        2.Subject 状态 是会变化的 (传递数据 使用 Object 可以认为是 不变的)

        不好的设计：
            当 1 变化的时候
                Subject 类代码 需要改变(new Observer1,2,3,... + notify(){ob1.update()...})

        好的设计：
            当 1 变化的时候 Subject 不需要改变代码
                实质是 将 Observers 放入 Array[Observer] 遍历，以解决 0，1，n 遍历问题
                并且采用了 针对接口编程、多用组合少用继承关系 设计原则